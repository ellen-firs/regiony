import streamlit as st
import pandas as pd
import plotly.express as px
import requests
import re

st.set_page_config(page_title="–†–µ–π—Ç–∏–Ω–≥ —Ä–µ–≥–∏–æ–Ω–æ–≤ –†–æ—Å—Å–∏–∏", layout="wide")
st.title("üó∫Ô∏è –†–µ–π—Ç–∏–Ω–≥ –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ –†–æ—Å—Å–∏–∏")

# ---- –î–ê–ù–ù–´–ï (–∫–∞–∫ —É —Ç–µ–±—è) ----
data = {
    '–†–µ–≥–∏–æ–Ω': [
        '–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ë—Ä—è–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 
        '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ò–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 
        '–ö–æ—Å—Ç—Ä–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 
        '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–û—Ä–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–†—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 
        '–°–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–¢–∞–º–±–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 
        '–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ú–æ—Å–∫–≤–∞', 
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–µ–ª–∏—è', '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–æ–º–∏', '–ù–µ–Ω–µ—Ü–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥', 
        '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–í–æ–ª–æ–≥–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 
        '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ú—É—Ä–º–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ù–æ–≤–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 
        '–ü—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–¥—ã–≥–µ—è', 
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞–ª–º—ã–∫–∏—è', '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π', 
        '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 
        '–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å', '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –î–∞–≥–µ—Å—Ç–∞–Ω', '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ò–Ω–≥—É—à–µ—Ç–∏—è', 
        '–ö–∞–±–∞—Ä–¥–∏–Ω–æ-–ë–∞–ª–∫–∞—Ä—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞', '–ö–∞—Ä–∞—á–∞–µ–≤–æ-–ß–µ—Ä–∫–µ—Å—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞', 
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –°–µ–≤–µ—Ä–Ω–∞—è –û—Å–µ—Ç–∏—è ‚Äì –ê–ª–∞–Ω–∏—è', '–ß–µ—á–µ–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞', 
        '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π', '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω', '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª', 
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–æ—Ä–¥–æ–≤–∏—è', '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω', '–£–¥–º—É—Ä—Ç—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞', 
        '–ß—É–≤–∞—à—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞', '–ü–µ—Ä–º—Å–∫–∏–π –∫—Ä–∞–π', '–ö–∏—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 
        '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ü–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 
        '–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–£–ª—å—è–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 
        '–ö—É—Ä–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥ ‚Äî –Æ–≥—Ä–∞', 
        '–Ø–º–∞–ª–æ-–ù–µ–Ω–µ—Ü–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥', '–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–ª—Ç–∞–π', '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢—ã–≤–∞', '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –•–∞–∫–∞—Å–∏—è', '–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π', 
        '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π', '–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 
        '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–¢–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë—É—Ä—è—Ç–∏—è', '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –°–∞—Ö–∞ (–Ø–∫—É—Ç–∏—è)', '–ó–∞–±–∞–π–∫–∞–ª—å—Å–∫–∏–π –∫—Ä–∞–π', 
        '–ö–∞–º—á–∞—Ç—Å–∫–∏–π –∫—Ä–∞–π', '–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π', '–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π –∫—Ä–∞–π', '–ê–º—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 
        '–ú–∞–≥–∞–¥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ï–≤—Ä–µ–π—Å–∫–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –æ–±–ª–∞—Å—Ç—å', 
        '–ß—É–∫–æ—Ç—Å–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥'
    ],
    '–†–∞–Ω–≥': [33, 26, 44, 27, 10, 60, 16, 46, 25, 74, 14, 24, 19, 23, 17, 39, 12, 85, 
             1, 8, 35, 6, 31, 58, 68, 37, 45, 11, 81, 48, 40, 18, 75, 38, 43, 56, 63, 
             78, 80, 72, 70, 50, 79, 59, 73, 21, 61, 76, 52, 64, 30, 4, 62, 41, 15, 
             71, 47, 34, 2, 42, 82, 84, 66, 53, 28, 51, 55, 9, 32, 13, 3, 29, 20, 36, 
             22, 69, 7, 77, 57, 65, 49, 67, 54, 5, 83]
}
df = pd.DataFrame(data)
df['–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–±–ª–µ–º–Ω–æ—Å—Ç–∏'] = 86 - df['–†–∞–Ω–≥']

# ---- –ó–∞–≥—Ä—É–∑–∫–∞ GeoJSON (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç—É –∂–µ —Å—Å—ã–ª–∫—É) ----
@st.cache_data
def load_geojson():
    base_url = "https://raw.githubusercontent.com/codeforamerica/click_that_hood/master/public/data/russia.geojson"
    try:
        resp = requests.get(base_url, timeout=15)
        resp.raise_for_status()
        geo = resp.json()
        # –î–æ–±–∞–≤–ª—è–µ–º –ö—Ä—ã–º –∏ –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å (—É–ø—Ä–æ—â—ë–Ω–Ω–æ) ‚Äî –∏–º–µ–Ω–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, —á—Ç–æ–±—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å geojson
        crimea_coords = [[32.5, 44.5], [36.5, 44.5], [36.5, 46.2], [32.5, 46.2], [32.5, 44.5]]
        sev_coords = [[33.4, 44.5], [33.7, 44.5], [33.7, 44.7], [33.4, 44.7], [33.4, 44.5]]
        geo["features"].append({
            "type": "Feature",
            "properties": {"name": "Republic of Crimea"},
            "geometry": {"type": "Polygon", "coordinates": [crimea_coords]}
        })
        geo["features"].append({
            "type": "Feature",
            "properties": {"name": "Sevastopol"},
            "geometry": {"type": "Polygon", "coordinates": [sev_coords]}
        })
        return geo
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ geojson: {e}")
        return None

geojson = load_geojson()
if not geojson:
    st.stop()

# ---- –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞: –ø–æ–∫–∞–∂–µ–º, –∫–∞–∫–∏–µ –∏–º–µ–Ω–∞ –µ—Å—Ç—å –≤ geojson (–≤ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–º—Å—è –±–ª–æ–∫–µ) ----
geo_names = [f['properties'].get('name') for f in geojson['features']]
with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∏–º–µ–Ω–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ geojson (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"):
    st.write(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ geojson: {len(geo_names)}")
    st.write(sorted([n for n in geo_names if n]))

# ---- –ü–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–∫–ª—é—á–∏ = –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ df['–†–µ–≥–∏–æ–Ω']) ----
# –ó–Ω–∞—á–µ–Ω–∏—è ‚Äî —Ç–µ –∏–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ click_that_hood geojson (–∞–Ω–≥–ª.)
name_mapping = {
    '–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Belgorod',
    '–ë—Ä—è–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Bryansk',
    '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Vladimir',
    '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Voronezh',
    '–ò–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Ivanovo',
    '–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Kaluga',
    '–ö–æ—Å—Ç—Ä–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Kostroma',
    '–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Kursk',
    '–õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Lipetsk',
    '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Moscow Oblast',
    '–û—Ä–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Oryol',
    '–†—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Ryazan',
    '–°–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Smolensk',
    '–¢–∞–º–±–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Tambov',
    '–¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Tver',
    '–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Tula',
    '–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Yaroslavl',
    '–ú–æ—Å–∫–≤–∞': 'Moscow',
    '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–µ–ª–∏—è': 'Republic of Karelia',
    '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–æ–º–∏': 'Komi',
    '–ù–µ–Ω–µ—Ü–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥': 'Nenets Autonomous Okrug',
    '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Arkhangelsk',
    '–í–æ–ª–æ–≥–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Vologda',
    '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Kaliningrad',
    '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Leningrad',
    '–ú—É—Ä–º–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Murmansk',
    '–ù–æ–≤–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Novgorod',
    '–ü—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Pskov',
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 'Saint Petersburg',
    '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–¥—ã–≥–µ—è': 'Adygea',
    '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞–ª–º—ã–∫–∏—è': 'Kalmykia',
    '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º': 'Republic of Crimea',
    '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π': 'Krasnodar',
    '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Astrakhan',
    '–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Volgograd',
    '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Rostov',
    '–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å': 'Sevastopol',
    '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –î–∞–≥–µ—Å—Ç–∞–Ω': 'Dagestan',
    '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ò–Ω–≥—É—à–µ—Ç–∏—è': 'Ingushetia',
    '–ö–∞–±–∞—Ä–¥–∏–Ω–æ-–ë–∞–ª–∫–∞—Ä—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞': 'Kabardino-Balkarian Republic',
    '–ö–∞—Ä–∞—á–∞–µ–≤–æ-–ß–µ—Ä–∫–µ—Å—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞': 'Karachay-Cherkess Republic',
    '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –°–µ–≤–µ—Ä–Ω–∞—è –û—Å–µ—Ç–∏—è ‚Äì –ê–ª–∞–Ω–∏—è': 'North Ossetia - Alania',
    '–ß–µ—á–µ–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞': 'Chechnya',
    '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π': 'Stavropol',
    '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω': 'Bashkortostan',
    '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª': 'Mari El',
    '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–æ—Ä–¥–æ–≤–∏—è': 'Mordovia',
    '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω': 'Tatarstan',
    '–£–¥–º—É—Ä—Ç—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞': 'Udmurt Republic',
    '–ß—É–≤–∞—à—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞': 'Chuvashia',
    '–ü–µ—Ä–º—Å–∫–∏–π –∫—Ä–∞–π': 'Perm',
    '–ö–∏—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Kirov',
    '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Nizhny Novgorod',
    '–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Orenburg',
    '–ü–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Penza',
    '–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Samara',
    '–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Saratov',
    '–£–ª—å—è–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Ulyanovsk',
    '–ö—É—Ä–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Kurgan',
    '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Sverdlovsk',
    '–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥ ‚Äî –Æ–≥—Ä–∞': 'Khanty-Mansi Autonomous Okrug',
    '–Ø–º–∞–ª–æ-–ù–µ–Ω–µ—Ü–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥': 'Yamalo-Nenets Autonomous Okrug',
    '–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Tyumen',
    '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Chelyabinsk',
    '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–ª—Ç–∞–π': 'Altai Republic',
    '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢—ã–≤–∞': 'Tuva',
    '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –•–∞–∫–∞—Å–∏—è': 'Khakassia',
    '–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π': 'Altai Krai',
    '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π': 'Krasnoyarsk',
    '–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Irkutsk',
    '–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Kemerovo',
    '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Novosibirsk',
    '–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Omsk',
    '–¢–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Tomsk',
    '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë—É—Ä—è—Ç–∏—è': 'Buryatia',
    '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –°–∞—Ö–∞ (–Ø–∫—É—Ç–∏—è)': 'Sakha Republic',
    '–ó–∞–±–∞–π–∫–∞–ª—å—Å–∫–∏–π –∫—Ä–∞–π': 'Zabaykalsky Krai',
    '–ö–∞–º—á–∞—Ç—Å–∫–∏–π –∫—Ä–∞–π': 'Kamchatka',
    '–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π': 'Primorsky Krai',
    '–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π –∫—Ä–∞–π': 'Khabarovsk',
    '–ê–º—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Amur',
    '–ú–∞–≥–∞–¥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Magadan',
    '–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Sakhalin',
    '–ï–≤—Ä–µ–π—Å–∫–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –æ–±–ª–∞—Å—Ç—å': 'Jewish Autonomous Oblast',
    '–ß—É–∫–æ—Ç—Å–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥': 'Chukotka'
}

# ---- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è "—É–º–Ω–æ–≥–æ" —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è ----
def tokenize(name: str):
    # —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ç–æ–∫–µ–Ω—ã, —É–±–∏—Ä–∞–µ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞
    if not isinstance(name, str):
        return set()
    s = re.sub(r'[^A-Za-z0-9–∞-—è–ê-–Ø\- ]', ' ', name)  # –æ—Å—Ç–∞–≤–ª—è–µ–º –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã/–¥–µ—Ñ–∏—Å
    tokens = set(t.lower() for t in s.split() if t)
    stopwords = {'oblast', 'region', 'republic', 'krai', 'autonomous', 'okrug', 'autonomous', 'auton', 'of', '-', 'the'}
    return tokens - stopwords

geo_names_set = set(n for n in geo_names if n)

def smart_match(preferred_name: str):
    """–í–µ—Ä–Ω—ë—Ç –∏–º—è –∏–∑ geojson, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –ø–æ–ø—Ä–æ–±—É–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ —Ç–æ–∫–µ–Ω–∞–º."""
    if preferred_name in geo_names_set:
        return preferred_name
    # –ø—Ä–æ–±—É–µ–º –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: –±–µ–∑ —Å–ª–æ–≤–∞ 'Oblast' –∏ —Ç.–ø.
    pref_tokens = tokenize(preferred_name)
    best = None
    best_score = 0
    for g in geo_names_set:
        g_tokens = tokenize(g)
        score = len(pref_tokens & g_tokens)
        if score > best_score:
            best_score = score
            best = g
    if best_score > 0:
        return best
    # –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ ‚Äî –≤–µ—Ä–Ω—ë–º preferred_name (px –ø—Ä–æ–ø—É—Å—Ç–∏—Ç –µ–≥–æ)
    return preferred_name

# ---- –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ + —É–º–Ω—ã–π –ø–æ–¥–±–æ—Ä ----
mapped = []
used_manual = {}  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –∫–∞–∫–∏–µ –±—ã–ª–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é
for r in df['–†–µ–≥–∏–æ–Ω']:
    pref = name_mapping.get(r, r)  # —Å–Ω–∞—á–∞–ª–∞ —è–≤–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
    matched = smart_match(pref)
    if matched != pref:
        used_manual[r] = (pref, matched)
    mapped.append(matched)

df['–†–µ–≥–∏–æ–Ω_–Ω–æ—Ä–º'] = mapped

# –ü–æ–∫–∞–∂–µ–º, –∫–∞–∫–∏–µ –∏–∑ –ø–µ—Ä–≤—ã—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
if used_manual:
    with st.expander("–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ -> –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ geojson)"):
        st.write(used_manual)

# –ö–∞–∫–∏–µ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ geojson:
not_found = [r for r in df['–†–µ–≥–∏–æ–Ω_–Ω–æ—Ä–º'].unique() if r not in geo_names_set]
if not_found:
    st.warning("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ–Ω–∞ –∏–∑ df –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ geojson (–æ–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –∫–∞—Ä—Ç–µ):")
    st.write(sorted(not_found))

# ---- –°—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—É ----
st.subheader("üó∫Ô∏è –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ –†–æ—Å—Å–∏–∏ (—Å –ö—Ä—ã–º–æ–º)")

fig = px.choropleth(
    df,
    geojson=geojson,
    locations='–†–µ–≥–∏–æ–Ω_–Ω–æ—Ä–º',
    featureidkey="properties.name",
    color='–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–±–ª–µ–º–Ω–æ—Å—Ç–∏',
    color_continuous_scale="RdYlBu_r",
    range_color=(0, 85),
    scope="world",
    labels={'–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–±–ª–µ–º–Ω–æ—Å—Ç–∏': '–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–±–ª–µ–º–Ω–æ—Å—Ç–∏'},
    hover_name='–†–µ–≥–∏–æ–Ω',
    hover_data={'–†–∞–Ω–≥': True, '–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–±–ª–µ–º–Ω–æ—Å—Ç–∏': False},
    title='–†–µ–π—Ç–∏–Ω–≥ –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ –†–æ—Å—Å–∏–∏'
)

fig.update_geos(
    visible=False,
    showcountries=True,
    countrycolor="black",
    showsubunits=True,
    subunitcolor="gray",
    subunitwidth=0.5,
    fitbounds="locations",
    center={"lat": 60, "lon": 90},
    projection_scale=1.8
)

fig.update_layout(height=700, margin={"r":0,"t":50,"l":0,"b":0}, geo=dict(bgcolor='lightblue', showland=True, landcolor='white'))

st.plotly_chart(fig, use_container_width=True)

# ---- –¢–æ–ø—ã ----
st.subheader("üìä –¢–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤")
col1, col2 = st.columns(2)
with col1:
    st.write("**üî¥ –¢–æ–ø-10 –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö:**")
    for i, row in df.nsmallest(10, '–†–∞–Ω–≥').iterrows():
        st.write(f"{row['–†–∞–Ω–≥']}. {row['–†–µ–≥–∏–æ–Ω']}")
with col2:
    st.write("**üîµ –¢–æ–ø-10 –±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω—ã—Ö:**")
    for i, row in df.nlargest(10, '–†–∞–Ω–≥').iterrows():
        st.write(f"{row['–†–∞–Ω–≥']}. {row['–†–µ–≥–∏–æ–Ω']}")
